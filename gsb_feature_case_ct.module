<?php
/**
 * @file
 * Code for the GSB Feature Case Content Type feature.
 */

include_once 'gsb_feature_case_ct.features.inc';

/**
 * Implements hook_form_FORM_ID_alter() for case node edit form.
 */
function gsb_feature_case_ct_form_case_node_form_alter(&$form, &$form_state) {
  global $user;
  $language = $form['language']['#value'];
  if(!isset($user->roles[11]) ){
    $form['field_document_uuid']['#disabled'] = TRUE;
    $form['field_document_name']['#disabled'] = TRUE;
    $form['field_case_access']['#disabled'] = TRUE;
    if($form['#bundle'] == 'case')
    $form['field_instance_text']['#disabled'] = TRUE;
  }
  $form['field_link_document']['#disabled'] = TRUE;

  $form['field_year']['#access'] = FALSE;

  $form['field_publication_type'][$language]['#default_value'] = 'case';
  unset($form['field_publication_type'][$language]['#options']['_none']);
  $form['field_publication_type']['#access'] = FALSE;
  if ($user->uid == 1 || in_array('administrator', array_values($user->roles))) {
    $form['field_publication_type']['#access'] = TRUE;
  }
}

/**
 * Implements hook_node_insert().
 */
function gsb_feature_case_ct_node_insert($node) {
  if ($node->type == 'case') {
    $node->field_publication_type[$node->language][0]['value'] = 'case';
  }
}

/**
 * Implements hook_node_update().
 */
function gsb_feature_case_ct_node_update($node) {
  if ($node->type == 'case') {
    $node->field_publication_type[$node->language][0]['value'] = 'case';
  }
}

/**
 * Sets up a callback function for handling the cmis import
 */
function gsb_feature_case_ct_gsb_cmis_content_type_import_info() {
  return array(
    'case' => array(
      'callback' => 'gsb_feature_case_ct_cmis_import',
    ),
  );
}

/**
 * The callback function for handling the cmis import for
 * the Case content type.
 */
function gsb_feature_case_ct_cmis_import($doc, $uuid) {

  global $user;

  // Check if the Paper has been set. If not, bail.
  if (empty($doc->properties['gsb:cwoPaperCopy']) || trim($doc->properties['gsb:cwoPaperCopy']) == '') {
    return;
  }

  // Valid Product Types for 'Case' Content type are either:
  //   Case
  //   Online Cases
  //   Video Cases
  $product_type = $doc->properties['gsb:cwoProductType'];
  if ($product_type != 'Case' && $product_type != 'Online Cases' && $product_type != 'Video Cases' ) {
    return;
  }

  // get the cwoAccess property, assume default of 'Not for distribution'
  $case_access = 'Not for distribution';
  if (!empty($doc->properties['gsb:cwoAccess']) && trim($doc->properties['gsb:cwoAccess']) != '') {
    $case_access = $doc->properties['gsb:cwoAccess'];
  }

  // Attempt to find a node with the document uuid
  $query = new EntityFieldQuery();
  $query->fieldCondition('field_document_uuid', 'value', $uuid, '=')->range(0, 1);
  $entities = $query->execute();

  if (!empty($entities['node'])) {
    // a node already exists, so load it
    $nids = array_keys($entities['node']);
    $node = node_load(array_shift($nids));
  } else {
    // a node doesn't exist

    // check the Case cwoAccess property
    // we do not import(create) Cases that are marked as 'Not for distribution'
    if ($case_access == 'Not for distribution') {
      return;
    }

    // create a node
    $values = array(
      'type' => 'case',
      'uid' => $user->uid,
      'status' => 1,
      'comment' => 1,
      'promote' => 0,
    );
    $node = entity_create('node', $values);
  }

  // if the node isn't a Case, then bail
  if ($node->type != 'case') {
    return;
  }

  if ($case_access == 'Not for distribution') {
    // delete the node
    node_delete($node->nid);
    return;
  }

  $language = $node->language;

  gsb_cmis_log('uuid = '.$uuid, 'success');

  $ewrapper = entity_metadata_wrapper('node', $node);

  gsb_cmis_log('writing document uuid', 'success');

  $ewrapper->field_document_uuid->set($uuid);

  gsb_cmis_log('writing title', 'success');

  if (!empty($doc->properties['cm:title']) && trim($doc->properties['cm:title']) != '') {
    $ewrapper->title->set($doc->properties['cm:title']);
    gsb_cmis_log('title 0 = ' . $doc->properties['cm:title'], 'success');
  } else {
    // if title is empty, then try to use document name
    if (!empty($doc->properties['cmis:contentStreamFileName']) && trim($doc->properties['cmis:contentStreamFileName']) != '') {
      $ewrapper->title->set($doc->properties['cmis:contentStreamFileName']);
      gsb_cmis_log('title 1 = ' . $doc->properties['cmis:contentStreamFileName'], 'success');
    } else {
      $ewrapper->title->set('no title');
    }
  }

  gsb_cmis_log('writing field_case_access', 'success');

  if (!empty($doc->properties['gsb:cwoAccess']) && trim($doc->properties['gsb:cwoAccess']) != '') {
    $ewrapper->field_case_access->set($doc->properties['gsb:cwoAccess']);
  } else {
    $ewrapper->field_case_access->set('Not for distribution');
  }

  gsb_cmis_log('writing field_year_of_publication', 'success');

  if (!empty($doc->properties['gsb:cwoPublicationYear']) && trim($doc->properties['gsb:cwoPublicationYear']) != '') {
    $year = $doc->properties['gsb:cwoPublicationYear'];
    gsb_cmis_log('year = '.$year, 'success');
    if (is_numeric($year)) {
      $date = new DateTime($year."-01-01");
      //$ewrapper->field_year->set($date->getTimestamp());
      $ewrapper->field_year_of_publication->set($date->getTimestamp());
    } else {
      //$ewrapper->field_year = NULL;
      $ewrapper->field_year_of_publication = NULL;
    }
  } else {
    //$ewrapper->field_year = NULL;
    $ewrapper->field_year_of_publication = NULL;
  }

  gsb_cmis_log('writing field_document_name', 'success');

  if (!empty($doc->properties['cmis:contentStreamFileName']) && trim($doc->properties['cmis:contentStreamFileName']) != '') {
    gsb_cmis_log('writing field_document_name = '.$doc->properties['cmis:contentStreamFileName'], 'success');
    $ewrapper->field_document_name->set($doc->properties['cmis:contentStreamFileName']);
  } else {
    $ewrapper->field_document_name->set(NULL);
  }

  gsb_cmis_log('writing field_description', 'success');

  if (!empty($doc->properties['gsb:cwoAbstract']) && trim($doc->properties['gsb:cwoAbstract']) != '') {
    $description = $doc->properties['gsb:cwoAbstract'];
    $description = str_replace('\n','<br/>',$description);
    $description = stripslashes($description);
    $ewrapper->field_description = array(
      'value' => $description,
      'format' => 'gsb_wysiwyg_text',
    );
  } else {
    $ewrapper->field_description = array(
      'value' => '',
      'format' => 'gsb_wysiwyg_text',
    );
  }

  gsb_cmis_log('writing field_link_document', 'success');

  $url = trim(gsb_cmis_api_getObjectURL('default', $doc));
  if (!empty($url)) {
    $url = _gsb_feature_case_ct_force_protocol($url);
    if (valid_url($url, TRUE)) {
      $ewrapper->field_link_document->url->set($url);
    } else {
      $ewrapper->field_link_document->set(NULL);
    }
  } else {
    $ewrapper->field_link_document->set(NULL);
  }

  gsb_cmis_log('writing field_author', 'success');

  if (!empty($doc->properties['cm:author']) && trim($doc->properties['cm:author']) != '') {
    $ewrapper->field_author->set($doc->properties['cm:author']);
  } else {
    $ewrapper->field_author->set(NULL);
  }

  gsb_cmis_log('writing field_permissions_statement', 'success');

  if (!empty($doc->properties['gsb:permisiionStatement']) && trim($doc->properties['gsb:permisiionStatement']) != '') {
    $ewrapper->field_permissions_statement->set($doc->properties['gsb:permisiionStatement']);
  } else {
    $ewrapper->field_permissions_statement->set(NULL);
  }

  gsb_cmis_log('writing field_link_single', 'success');

  $url_harvard = trim($doc->properties['gsb:cwoLinkAtHarvard']);
  if (!empty($url_harvard)) {
    $url_harvard = _gsb_feature_case_ct_force_protocol($url_harvard);
    if (valid_url($url_harvard, TRUE)) {
      $ewrapper->field_link_single->url->set($url_harvard);
      $ewrapper->field_has_harvard_link->set("1");
    } else {
      $ewrapper->field_link_single->set(NULL);
      $ewrapper->field_has_harvard_link->set("0");
    }
  } else {
    $ewrapper->field_link_single->set(NULL);
    $ewrapper->field_has_harvard_link->set("0");
  }

  gsb_cmis_log('writing field_link_center_single', 'success');

  $url_casecenter = trim($doc->properties['gsb:cwoECopy']);
  if (!empty($url_casecenter)) {
    $url_casecenter = _gsb_feature_case_ct_force_protocol($url_casecenter);
    if (valid_url($url_casecenter, TRUE)) {
      $ewrapper->field_link_center_single->url->set($url_casecenter);
      $ewrapper->field_has_case_center->set("1");
    } else {
      $ewrapper->field_link_center_single->set(NULL);
      $ewrapper->field_has_case_center->set("0");
    }
  } else {
    $ewrapper->field_link_center_single->set(NULL);
    $ewrapper->field_has_case_center->set("0");
  }

  gsb_cmis_log('writing field_citation', 'success');

  if (!empty($doc->properties['gsb:cwoCitation']) && trim($doc->properties['gsb:cwoCitation']) != '') {
    $ewrapper->field_citation->set($doc->properties['gsb:cwoCitation']);
  } else {
    $ewrapper->field_citation->set(NULL);
  }

  gsb_cmis_log('writing field_learning_objective', 'success');

  if (!empty($doc->properties['gsb:cwoLearningObjective']) && trim($doc->properties['gsb:cwoLearningObjective']) != '') {
    $learning = $doc->properties['gsb:cwoLearningObjective'];
    $learning = str_replace('\n','',$learning);
    $ewrapper->field_learning_objective->set($learning);
  } else {
    $ewrapper->field_learning_objective->set(NULL);
  }

  gsb_cmis_log('writing field_page_count', 'success');

  if (!empty($doc->properties['gsb:cwoLength']) && trim($doc->properties['gsb:cwoLength']) != '') {
    $ewrapper->field_page_count->set($doc->properties['gsb:cwoLength']);
  } else {
    $ewrapper->field_page_count->set(NULL);
  }

  gsb_cmis_log('writing field_product_type', 'success');

  $ewrapper->field_product_type->set($product_type);

  gsb_cmis_log('writing field_business_insight_topic', 'success');

  if (!empty($doc->properties['gsb:cwoBusinessTopics']) && trim($doc->properties['gsb:cwoBusinessTopics']) != '') {
    $ids = array();
    $bi_topic = $doc->properties['gsb:cwoBusinessTopics'];
    $results = taxonomy_get_term_by_name($bi_topic);
    foreach ($results as $item) {
      if ($item->vocabulary_machine_name == 'business_insight_topic') {
        $ids[] = $item->tid;
      }
    }
    $ewrapper->field_business_insight_topic->set($ids);
  } else {
    $ewrapper->field_business_insight_topic = array();
  }

  gsb_cmis_log('writing field_academic_area_unlimited', 'success');

  if (!empty($doc->properties['gsb:cwoAcademicArea']) && trim($doc->properties['gsb:cwoAcademicArea']) != '') {
    $ids = array();
    $academic_area = $doc->properties['gsb:cwoAcademicArea'];
    $results = taxonomy_get_term_by_name($academic_area);
    foreach ($results as $item) {
      if ($item->vocabulary_machine_name == 'academic_area') {
        $ids[] = $item->tid;
      }
    }
    $ewrapper->field_academic_area_unlimited->set($ids);
  } else {
    $ewrapper->field_academic_area_unlimited = array();
  }

  gsb_cmis_log('writing field_paper_copy', 'success');

  if (!empty($doc->properties['gsb:cwoPaperCopy']) && trim($doc->properties['gsb:cwoPaperCopy']) != '') {
    $ewrapper->field_paper_copy->set($doc->properties['gsb:cwoPaperCopy']);
  } else {
    $ewrapper->field_paper_copy->set(NULL);
  }

  gsb_cmis_log('writing field_item_id', 'success');

  if (!empty($doc->properties['gsb:cwoItemId']) && trim($doc->properties['gsb:cwoItemId']) != '') {
    $ewrapper->field_item_id->set($doc->properties['gsb:cwoItemId']);
  } else {
    $ewrapper->field_item_id->set(NULL);
  }

  gsb_cmis_log('writing field_tag', 'success');

  $tags = _gsb_feature_case_ct_getTags($uuid);

  if (!empty($tags)) {
    $ids = array();
    $term_list = array();
    _gsb_feature_case_ct_add_tags($tags);
    foreach($tags as $term) {
      $results = taxonomy_get_term_by_name($term);
      $term_list = array_merge($term_list, $results);
    }
    foreach ($term_list as $item) {
      if ($item->vocabulary_machine_name == 'tag') {
        $ids[] = $item->tid;
      }
    }
    $ewrapper->field_tag->set($ids);
  } else {
    $ewrapper->field_tag = array();
  }

  gsb_cmis_log('writing sunet field_authors', 'success');

  _gsb_feature_case_ct_import_sunet_authors($node,$ewrapper,$doc);

  gsb_cmis_log('writing field_free_case', 'success');

  $ewrapper->field_free_case->set("0");
  if ($case_access == 'Free') {
    $ewrapper->field_free_case->set("1");
  }

  gsb_cmis_log('saving node nid = ' . $node->nid, 'success');

  $ewrapper->save();

  // @todo there maybe a better way to handle the following, but
  // I couldn't seem to get $ewrapper->field_authors->set()
  // and properly update the node's field collection.

  $node = node_load($node->nid);

  // get the new list of authors saved with the node
  $authors = $ewrapper->field_authors->value();

  // update the list to remove any field collections that
  // have been deleted and then save the node
  if (!empty($authors)) {
    unset($node->field_authors[$language]);
    $node->field_authors[$language] = array();
    foreach($authors as $key => $author) {
      if ($author == null) {
        // skipping the deleted item
        continue;
      }
      $node->field_authors[$language][] = array('revision_id' => $author->revision_id, 'value' => $author->item_id);
    }
  }

  $node->status = 1;
  $node->workbench_moderation['updating_live_revision'] = 1;

  node_save($node);

}

/**
 * Add the case tags from the returned Alfresco data
 */
function _gsb_feature_case_ct_add_tags($tags) {
  $vocab = taxonomy_vocabulary_machine_name_load('tag');
  $vid = $vocab->vid;
  foreach($tags as $term) {
    $results = taxonomy_get_term_by_name($term);
    if (empty($results)) {
      _gsb_feature_case_ct_add_tag_term($term, $vid);
    } else {
      $found = FALSE;
      foreach ($results as $item) {
        if ($item->vocabulary_machine_name == 'tag') {
          $found = TRUE;
          break;
        }
      }
      if (!$found) {
        _gsb_feature_case_ct_add_tag_term($term, $vid);
      }
    }
  }
}

/**
 * Add a tag term
 */
function _gsb_feature_case_ct_add_tag_term($term, $vid) {
  $new_term = new stdClass();
  $new_term->name = $term;
  $new_term->description = '';
  $new_term->vid = $vid;
  $new_term->parent = null;
  taxonomy_term_save($new_term);
}

/**
 * Add protocol of http:// if url has no protocol
 */
function _gsb_feature_case_ct_force_protocol($url) {
  if (!stristr($url,'http://') && !stristr($url,'https://')) {
    return 'http://' . $url;
  }
  return $url;
}

/**
 * Get the list of tags from Alfresco
 */
function _gsb_feature_case_ct_getTags($uuid) {

  $tags = array();

  $repo_info = variable_get('cmis_repositories', false);
  if (!$repo_info) {
    return $tags;
  }

  // get the id - striped down to just the number

  $id = str_replace('urn:uuid:', '', $uuid);

  // put together the url for the alfresco service call - to get 'tags'

  $url = $repo_info['default']['service_url'];
  $url = $url . $id . '/tags';

  // get the user and password

  $user = $repo_info['default']['user'];
  $password = $repo_info['default']['password'];

  // setup the curl options

  $session = curl_init();

  curl_setopt($session, CURLOPT_URL, $url);
  curl_setopt($session, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($session, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($session, CURLOPT_FOLLOWLOCATION, 1);
  curl_setopt($session, CURLOPT_COOKIEFILE, "");
  curl_setopt($session, CURLOPT_USERPWD, $user. ":" . $password);
  curl_setopt($session, CURLOPT_HTTPHEADER, array("Content-Type" => ""));
  curl_setopt($session, CURLOPT_CUSTOMREQUEST, "GET");

  // make the return value object

  $retval = new stdClass();
  $retval->url = $url;
  $retval->method = "GET";
  $retval->content_sent = null;
  $retval->content_type_sent = "";

  // make the curl call

  $retval->body = curl_exec($session);

  // set the return values

  $retval->code = curl_getinfo($session, CURLINFO_HTTP_CODE);
  $retval->content_type = curl_getinfo($session, CURLINFO_CONTENT_TYPE);
  $retval->content_length = curl_getinfo($session, CURLINFO_CONTENT_LENGTH_DOWNLOAD);

  // close the curl session

  curl_close($session);

  if ($retval->code == '200') {
    $tags = drupal_json_decode($retval->body);
  }

  return $tags;
}

/**
 * Get sunet authors from the Alfresco doc properties
 */
function _gsb_feature_case_ct_import_sunet_authors($node,$ewrapper,$doc) {

  // gather a list of entity ids to add and remove
  $add_entity_ids = array();
  $del_field_collection_items = array();

  // get the list of sunetids from Alfresco's returned data
  $sunet_ids = array();
  if (!empty($doc->properties['gsb:authorsSunetId']) && trim($doc->properties['gsb:authorsSunetId']) != '') {
    $sunet_ids = array_map('trim', explode(',', $doc->properties['gsb:authorsSunetId']));
    // lookup the node ids related to these ids
    $query = db_select('field_data_field_sunetid', 'su');
    $query->fields('su', array('bundle', 'entity_id', 'field_sunetid_value'));
    $query->condition('su.field_sunetid_value',$sunet_ids,'IN');
    $result = $query->execute();
    // start by putting all these node ids in the add list
    foreach ($result as $record) {
      $add_entity_ids[$record->entity_id] = $record->entity_id;
    }
  }

  // get the current list of authors saved with the node
  $authors = $ewrapper->field_authors->value();

  // if any of the author ids match one of the sunetid node ids, then
  // we don't need to add it, and can remove it from our add list.
  // also...
  // if an author id isn't in the add list, then it needs to be removed
  // so we'll add it to our delete list.
  foreach($authors as $author) {
    $ewrap_author = entity_metadata_wrapper('field_collection_item', $author);
    $ref = $ewrap_author->field_person_fac_single_ref->value();
    if ($ref) {
      $author_nid = $ref->nid;
      if (!empty($add_entity_ids[$author_nid])) {
        unset($add_entity_ids[$author_nid]);
      } else {
        $del_field_collection_items[] = $author;
      }
    }
  }

  // check for an 'default/empty' author field collection
  // remove if this is the case, and we have authors to add
  $found_default = FALSE;
  if (count($authors) == 1) {
    if (empty($authors[0]->field_first_name)) {
      if (empty($authors[0]->field_last_name)) {
        if (empty($authors[0]->field_person_fac_single_ref)) {
          $found_default = TRUE;
        }
      }
    }
  }
  if ($found_default && count($add_entity_ids) > 0) {
    $ewrapper->field_authors->set(NULL);
  }

  // add any new authors that came for the sunetids
  foreach ($add_entity_ids as $entity_id) {
    _gsb_feature_case_ct_add_author($node, $entity_id);
  }

  // delete any authors that are no longer sunetids in Alfresco
  foreach($del_field_collection_items as $item) {
    $item->delete();
  }

}

/**
 * Add an author entity ref (via field_authors field collection)
 * to the node's current list
 */
function _gsb_feature_case_ct_add_author($node, $entity_id) {

  $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_authors'));
  $field_collection_item->setHostEntity('node', $node);

  $field_collection_item->field_person_fac_single_ref = array(
    'und' => array(array('target_id' => $entity_id)),
  );

  $field_collection_item->field_person_fac_or_other = array(
    'und' => array(array('value' => 'UseEntityReference')),
  );

  $field_collection_item->field_first_name = array();
  $field_collection_item->field_last_name = array();

  $field_collection_item->field_profile_visibility = array(
    'und' => array(array('value' => '1')),
  );

  $field_collection_item->save();

}

/**
 * Add an author entity 'other' info (via field_authors field collection)
 * to the first and last name given.
 */
function _gsb_feature_case_ct_add_other_author($node, $first_name, $last_name) {

  $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_authors'));
  $field_collection_item->setHostEntity('node', $node);

  $field_collection_item->field_person_fac_single_ref = array();

  $field_collection_item->field_person_fac_or_other =  array(
    'und' => array(array('value' => 'Other')),
  );

  $field_collection_item->field_first_name = array(
    'und' => array(array('value' => $first_name)),
  );

  $field_collection_item->field_last_name = array(
    'und' => array(array('value' => $last_name)),
  );

  $field_collection_item->field_profile_visibility =  array(
    'und' => array(array('value' => '1')),
  );

  $field_collection_item->save();

}

function _gsb_feature_case_ct_delete_case($uuid) {

  // Attempt to find a node with the document uuid
  $query = new EntityFieldQuery();
  $query->fieldCondition('field_document_uuid', 'value', $uuid, '=')->range(0, 1);
  $entities = $query->execute();

  if (!empty($entities['node'])) {
    // a node already exists, so delete it
    $nids = array_keys($entities['node']);
    node_delete(array_shift($nids));
  }

}

/**
 * Implements hook_field_extra_fields().
 */
function gsb_feature_case_ct_field_extra_fields() {
  $extra = array();
  $extra['node']['case']['display']['gsb_feature_case_ct_pdf_statement'] = array(
    'label' => t('GSB Case PDF Statement'),
    'description' => t('The GSB Case PDF Statement'),
    'weight' => 0,
  );
  return $extra;
}

/**
 * Implements hook_node_view().
 */
function gsb_feature_case_ct_node_view($node, $view_mode, $langcode) {
  // If this field is not configured for this view mode, skip it.
  $fields = field_extra_fields_get_display('node', $node->type, $view_mode);
  if (empty($fields['gsb_feature_case_ct_pdf_statement']['visible'])) {
    return;
  }
  if ($node->type == 'case') {
    $language = $node->language;
    $case_access = _gsb_feature_case_ct_getCaseAccess($node);
    $pdf_statement_markup = '';
    if (in_array($case_access, array('Free') )) {
      $pdf_statement_markup = '<span class="gsb-feature-case-ct-pdf-statement">' .
        t('This material is available for download at no charge.') .
        '</span>';
    }
    if (in_array($case_access, array('Instructors only') )) {
      $pdf_statement_markup = '<span class="gsb-feature-case-ct-pdf-statement">' .
        t('This material is available for download by instructors only. For inquiries, contact the ') .
        '<a href="mailto:businesscases@stanford.edu" target="_blank">' .
        t('Case Writing Office') .
        '</a>.' .
        '</span>';
    }
    if (in_array($case_access, array('Stanford GSB classes only, accessible') )) {
      $pdf_statement_markup = '<span class="gsb-feature-case-ct-pdf-statement">' .
        t('This material is available for download by current Stanford GSB students, faculty, and staff only. For inquiries, contact the ') .
        '<a href="mailto:businesscases@stanford.edu" target="_blank">' .
        t('Case Writing Office') .
        '</a>.' .
        '</span>';
    }
    if (in_array($case_access, array('Stanford GSB classes only, restricted') )) {
      $pdf_statement_markup = '<span class="gsb-feature-case-ct-pdf-statement">' .
        t('This material is designated for use in specific Stanford GSB classes only. For inquiries, contact the ') .
        '<a href="mailto:businesscases@stanford.edu" target="_blank">' .
        t('Case Writing Office') .
        '</a>.' .
        '</span>';
    }
    if (in_array($case_access, array('Educational use only') )) {
      $pdf_statement_markup = '<span class="gsb-feature-case-ct-pdf-statement">' .
        t('This material is available for download by current Stanford GSB students, faculty, and staff only. For inquiries, contact the ') .
        '<a href="mailto:businesscases@stanford.edu" target="_blank">' .
        t('Case Writing Office') .
        '</a>.' .
        '</span>';
    }
    if (in_array($case_access, array('Education and Corporate use') )) {
      $pdf_statement_markup = '<span class="gsb-feature-case-ct-pdf-statement">' .
        t('This material is available for download by current Stanford GSB students, faculty, and staff, as well as Stanford GSB alumni. For inquiries, contact the ') .
        '<a href="mailto:businesscases@stanford.edu" target="_blank">' .
        t('Case Writing Office') .
        '</a>.' .
        '</span>';
    }
    if ($pdf_statement_markup != '') {
      $node->content['gsb_feature_case_ct_pdf_statement'] = array(
        '#markup' => $pdf_statement_markup,
      );
    }
  }
}

/**
 * Implements hook_ffc_conditions_info().
 */
function gsb_feature_case_ct_ffc_conditions_info() {
  $conditions = array();
  $conditions['hide_any_string'] = array(
    'title' => t('Hide when target field contains any string'),
  );
  return $conditions;
}

/**
 * Presents condition form for the 'hide_any_string' ffc condition
 */
function ffc_condition_form_hide_any_string($context, $configuration) {
  $form = array();
  $form['target'] = array(
    '#type' => 'select',
    '#title' => t('Select target field'),
    '#options' => ffc_get_condition_fields($context),
    '#default_value' => isset($configuration['target']) ? $configuration['target'] : '',
  );
  $form['or_strings'] = array(
    '#type' => 'textarea',
    '#title' => 'Or Strings',
    '#default_value' => isset($configuration['or_strings']) ? $configuration['or_strings'] : '',
  );
  return $form;
}

/**
 * Executes the 'hide_any_string' ffc condition
 */
function ffc_condition_execute_hide_any_string(&$build, $source, $configuration, $context) {
  $language = $context['entity']->language;
  $hide_any_strings = explode("\n", $configuration['or_strings']);
  if (in_array($context['entity']->{$configuration['target']}[$language][0]['value'], $hide_any_strings)) {
    $build[$source]['#access'] = FALSE;
  }
}

/**
 * Get the Access Property setting for the node.
 */
function _gsb_feature_case_ct_getCaseAccess($node) {
  $language = $node->language;
  $case_access = 'Not for distribution';
  if (!empty($node->field_case_access[$language])) {
    $case_access = $node->field_case_access[$language][0]['value'];
  }
  return $case_access;
}
